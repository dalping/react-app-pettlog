{"version":3,"sources":["_actions/types.js","_actions/user_action.js","components/views/LoginPage/LoginPage.js","components/views/Post/InputReplyComment.js","components/views/Post/Comment.js","components/views/Post/InputComment.js","components/views/Post/Writer.js","components/views/Post/Post.js","components/views/MainPage/MainPage.js","components/views/NavBar/MenuRight.js","components/views/NavBar/NavBar.js","components/views/RegisterPage/RegisterPage.js","hoc/auth.js","components/views/WritePost/WritePost.js","App.js","reportWebVitals.js","_reducer/index.js","_reducer/user_reducer.js","index.js"],"names":["LOGIN_USER","REGISTER_USER","AUTH_USER","auth","request","axios","get","then","response","data","type","payload","withRouter","props","dispatch","useDispatch","useState","Email","setEmail","Password","setPassword","style","display","justifyContent","alignItems","width","height","flexDirection","onSubmit","e","preventDefault","alert","dataToSubmit","post","console","log","loginUser","email","password","res","loginSuccess","history","push","err_type","value","onChange","target","InputReplyComment","InputReply","setInputReply","onSubmitReplyComment","length","variable","replyTo","comment","_id","userId","user","postId","success","updateComment","openReplyHandler","backgroundColor","padding","placeholder","name","onClick","disabled","Comment","date","createdAt","OpenReplyComment","setOpenReplyComment","deleteCommnet","commentId","deleteComment","className","profileImage","size","src","marginRight","icon","UserOutlined","textAlign","substring","CloseCircleOutlined","comments","map","idx","InputComment","setInputComment","onSubmitComment","Writer","ModalVisible","setModalVisible","modalVisibleHandler","content","placement","trigger","writer","title","visible","onOk","message","onCancel","TextArea","autoSize","minRows","maxRows","Post","useSelector","state","user_reducer","Like","setLike","LikeCount","setLikeCount","Comments","setComments","OpenComment","setOpenComment","useEffect","like","filter","me","likeFrom","includes","userData","deleteCommentId","findIndex","newArr","splice","newComment","concat","role","onConfirm","filePath","deletePost","okText","cancelText","CloseSquareOutlined","alt","split","line","Fragment","MessageOutlined","color","HeartFilled","HeartOutlined","RetweetOutlined","Posts","setPosts","Page","setPage","Loading","setLoading","pageEnd","useRef","IntersectionObserver","entries","isIntersecting","getPosts","threshold","observe","current","skip","newData","posts","deletePostId","p","reverse","ref","LoadingOutlined","fontSize","isAuth","NavBar","position","zIndex","href","ConfirmPassword","setConfirmPassword","Name","setName","Image","setImage","File","setFile","fileInput","saveDataDB","path","err","registerUser","formData","FormData","append","header","url","onDrop","margin","click","accept","files","reader","FileReader","onload","readyState","result","readAsDataURL","SpecificComponent","option","adminRoute","AuthenticationCheck","isAdmin","fileList","setFileList","Title","setTitle","Content","setContent","uploadPost","Date","a","config","i","originFileObj","listType","maxCount","beforeUpload","file","error","Upload","LIST_IGNORE","multiple","newFileList","UploadOutlined","marginTop","App","exact","component","Auth","MainPage","LoginPage","WritePost","RegisterPage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","registerSuccess","createStoreWithMiddleware","applyMiddleware","promiseMiddleware","ReduxThunk","createStore","ReactDOM","render","store","Reducer","window","__REDUX_DEVTOOLS_EXTENSION__","document","getElementById"],"mappings":"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","file":"static/js/main.0b2420f3.chunk.js","sourcesContent":["export const LOGIN_USER = \"login_user\";\nexport const REGISTER_USER = \"register_user\";\nexport const AUTH_USER = \"auth_user\";","import axios from 'axios';\nimport {\n    LOGIN_USER,\n    REGISTER_USER,\n    AUTH_USER\n} from './types';\n\nexport function loginUser(dataToSubmit){\n\n    const request = axios.post('/api/users/login', dataToSubmit)\n        .then(response => response.data)\n\n    console.log(request); //Promise 반환\n\n    return { //action of reducers\n        type: LOGIN_USER,\n        payload: request \n    }\n}\n\nexport function registerUser(dataToSubmit){\n\n    console.log(dataToSubmit)\n\n    const request = axios.post('/api/users/register', dataToSubmit)\n    .then(response => {\n        if(!response.data.success){\n            console.log(response.data.err)\n        }\n        console.log('res.data'); \n        console.log(response.data); \n        return response.data})\n\n    console.log('action');\n    console.log(request);\n\n    return {\n        type: REGISTER_USER,\n        payload: request\n    }\n}\n\nexport function auth(){\n\n    const request = axios.get('/api/users/auth')\n    .then(response => response.data)\n\n    return {\n        type: AUTH_USER,\n        payload: request\n    }\n}","\nimport React,{ useState } from 'react';\nimport {useDispatch} from 'react-redux';\nimport {loginUser} from '../../../_actions/user_action';\nimport {withRouter} from  'react-router-dom';\n\nfunction LoginPage(props) {\n\n    const dispatch = useDispatch();\n\n    const [Email, setEmail] = useState(\"\");\n    const [Password, setPassword] = useState(\"\");\n\n    const onEmailHandler = (e) =>{\n        setEmail(e.target.value);\n    }\n\n    const onPasswordHandler = (e) =>{\n        setPassword(e.target.value);\n    }\n\n    const onSubmitHandler = (e) =>{\n        e.preventDefault(); //page refresh 방지\n\n        if(Email === ''|| Password ==='') return alert('아이디와 비밀번호를 입력하세요.')\n\n        let body = {\n            email:Email,\n            password:Password\n        }\n\n        dispatch(loginUser(body))\n        .then(res=>{\n            if(res.payload.loginSuccess){ //로그인 성공시\n                props.history.push('/')\n            }else{\n                if(res.payload.err_type === \"not_exist_email\" || res.payload.err_type === \"wrong_password\" ) \n                    return alert('아이디와 비밀번호를 다시 확인해주세요.');                \n            }\n        })\n    }\n\n    return (\n        <div style={{display:'flex', justifyContent:'center', alignItems:'center',width:'100%',height:'100vh'}}>\n            <form style={{display:'flex', flexDirection:'column'}} onSubmit={onSubmitHandler}>\n                <label>Email</label>\n                <input type=\"email\" value={Email} onChange={onEmailHandler}></input>\n                <label>Password</label>\n                <input type=\"password\" value={Password} onChange={onPasswordHandler}></input>\n                <br/>\n                <button>\n                    Login\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default withRouter(LoginPage)\n","import React, {useState} from 'react'\nimport { Input, Button } from 'antd'\nimport axios from 'axios'\n\nfunction InputReplyComment(props) {\n    \n    const [InputReply, setInputReply] = useState('')\n    \n    const InputReplyHandelr = (e) => {\n        setInputReply(e.target.value)\n    }\n\n    const onSubmitReplyComment = (e) => {\n        e.preventDefault();\n\n        if(InputReply.length === 0) return \n\n        const variable = {\n            replyTo : props.comment._id,\n            userId : props.user._id,\n            postId : props.post._id,\n            comment : InputReply\n        }\n\n        axios.post('/api/comment/uploadReplyComment', variable)\n        .then(res=>{\n            if(res.data.success){\n                setInputReply('')\n                props.updateComment(res.data.comment)\n                props.openReplyHandler()  \n            }else{\n                alert('리플라이 코멘트 작성 실패')\n            }\n        })\n    }\n\n    return (\n        <div style={{backgroundColor:'#98ddca', padding:'10px'}}>\n            <form style={{display:'flex', width:'100%'}} onSubmit={onSubmitReplyComment}>\n                <Input type=\"text\" value={InputReply} onChange={InputReplyHandelr} placeholder={`@${props.comment.userId.name} 에게 댓글 달기...`}/>\n                {\n                    InputReply.length > 0 ? \n                    <Button type=\"text\" onClick={onSubmitReplyComment}>작성</Button>\n                    : <Button type=\"text\" disabled>작성</Button>\n                }\n            </form>\n        </div>\n    )\n}\n\nexport default InputReplyComment\n","import React, {useState} from 'react'\nimport {\n    CloseCircleOutlined,\n    UserOutlined\n  } from '@ant-design/icons';\nimport { Avatar } from 'antd';\nimport axios from 'axios';\nimport './Comment.css'\n\nimport InputReplyComment from './InputReplyComment';\n\nfunction Comment(props) {\n\n    const date = props.comment.createdAt\n    const [OpenReplyComment, setOpenReplyComment] = useState(false)\n\n    const deleteCommnet = (commentId) => {\n        axios.post('/api/comment/deleteComment',{_id:commentId})\n        .then(res=>{\n            if(res.data.success){\n                props.deleteComment(commentId)\n            }\n        })\n    }\n\n    const openReplyHandler = () => {\n        setOpenReplyComment(!OpenReplyComment)\n    }\n\n    return (\n        <>\n        <div className=\"comment\">\n        {\n            props.comment.userId.profileImage?\n            <Avatar size={48} src={`https://radiant-hamlet-78297.herokuapp.com/${props.comment.userId.profileImage}`} style={{marginRight:'10px'}} />\n            :<Avatar size={48} icon={<UserOutlined />} style={{marginRight:'10px'}}/>\n        }\n            <div className=\"commentMain\">\n                <span className=\"commentWriter\">{props.comment.userId.name}</span>\n                <span style={{width:'100%', textAlign:'justify'}}>\n                    {props.comment.comment}\n                    <br/>\n                    <span className=\"commentDate\">{`${date.substring(0,10)} ${date.substring(11,16)}`}</span>\n                    {\n                        props.user._id === props.comment.userId._id? \n                        <CloseCircleOutlined className=\"commentBtn\" onClick={()=>{deleteCommnet(props.comment._id)}} />\n                        :<span className=\"commentBtn\" onClick={openReplyHandler}>Reply</span>\n                    }\n                </span>\n            </div>\n        </div>\n        { //Reply Comments\n            props.comments.map((data, idx) => \n                (\n                    data.replyTo && data.replyTo === props.comment._id &&\n                    <div className=\"comment\" key={idx}>\n                        <span style={{marginRight:\"10px\"}}> ↳ </span>\n                        {\n                            data.userId.profileImage?\n                            <Avatar size={48} src={`https://radiant-hamlet-78297.herokuapp.com/${data.userId.profileImage}`} style={{marginRight:'10px'}} />\n                            :<Avatar size={48} icon={<UserOutlined />} style={{marginRight:'10px'}}/>\n                        }\n                        <div className=\"commentMain\">\n                            <span className=\"commentWriter\">{data.userId.name}</span>\n                            <span className=\"commentContent\">\n                                {data.comment}\n                                <br/>\n                                <span className=\"commentDate\">{`${date.substring(0,10)} ${date.substring(11,16)}`}</span>\n                                {\n                                    data.userId._id === props.user._id &&\n                                    <CloseCircleOutlined className=\"commentBtn\" onClick={()=>{deleteCommnet(data._id)}} />\n                                }\n                            </span>\n                        </div>\n                    </div>\n                )\n            )\n        }\n        {\n            OpenReplyComment?\n            <InputReplyComment \n                comment={props.comment} \n                user={props.user} \n                post={props.post} \n                updateComment={props.updateComment}\n                openReplyHandler={openReplyHandler}\n            /> : null\n        }\n        </>\n    )\n}\n\nexport default Comment\n","import axios from 'axios'\nimport React,{useState} from 'react'\nimport { Input, Button } from 'antd';\n\nfunction InputComment(props) {\n        \n    const [InputComment, setInputComment] = useState('')\n\n    const inputCommentHandler = (e) => {\n        setInputComment(e.target.value)\n    }\n\n    const onSubmitComment = (e) => {\n        e.preventDefault();\n\n        if(InputComment.length === 0) return \n\n        const variable = {\n            userId : props.user._id,\n            postId : props.postId,\n            comment : InputComment\n        }\n\n        axios.post('/api/comment/uploadComment', variable)\n        .then(res=>{\n            if(res.data.success){\n                setInputComment('') \n                props.updateComment(res.data.comment)   \n            }else{\n                alert('코멘트 작성 실패')\n            }\n        })\n    }\n\n    return (\n        <div className=\"inputComment\">\n            <span style={{width:'10%'}}>{props.user.name}</span>\n            <form style={{display:'flex', width:'90%'}} onSubmit={onSubmitComment} >\n                <Input type=\"text\" value={InputComment} onChange={inputCommentHandler}/>\n                { \n                    InputComment.length > 0 ? \n                    <Button onClick={onSubmitComment} type='text'>작성</Button>\n                    : <Button type='text' disabled>작성</Button>\n                }\n            </form>\n        </div>\n    )\n}\n\nexport default InputComment\n","import React, {useState} from 'react'\nimport {Popover, Modal, Input, message} from 'antd'\n\nfunction Writer(props) {\n\n    const [ModalVisible, setModalVisible] = useState(false)\n    \n    const modalVisibleHandler = () => {\n        setModalVisible(!ModalVisible)\n    }\n\n    const sendMessageHandler = () => {\n        message.success('쪽지를 전송했습니다.')\n        setModalVisible(!ModalVisible)\n    }\n\n    const content = (\n        <div className=\"userInfo\">\n            <span>포스트 보기</span>\n            <span>구독하기</span>\n            <span onClick={modalVisibleHandler}>쪽지 보내기</span>\n        </div>\n    );\n\n\n    return (\n        <>\n            <Popover placement=\"bottom\" content={content} trigger=\"click\">\n                <span className=\"writer\">{props.writer.name}</span>\n            </Popover>\n            <Modal title=\"쪽지 보내기\" visible={ModalVisible} onOk={sendMessageHandler} onCancel={modalVisibleHandler}>\n                <Input.TextArea \n                    autoSize={{ minRows: 5, maxRows: 5 }}>\n                </Input.TextArea>\n            </Modal>\n        </>\n    )\n}\n\nexport default Writer\n","import React,{useState, useEffect, useRef} from 'react'\nimport {\n    CloseSquareOutlined,\n    MessageOutlined,\n    HeartFilled,\n    HeartOutlined,\n    RetweetOutlined,\n    UserOutlined\n  } from '@ant-design/icons';\nimport { useSelector } from 'react-redux';\nimport { Image,Popconfirm,Carousel,Avatar} from 'antd';\nimport axios from 'axios';\nimport Comment from './Comment';\nimport InputComment from './InputComment';\nimport Writer from './Writer';\nimport './Post.css'\nimport './Comment.css'\n\nfunction Post(props) {\n    \n    const user = useSelector(state => state.user_reducer)\n\n    const date = props.post.createdAt\n    const [Like, setLike] = useState(false)\n    const [LikeCount, setLikeCount] = useState(0)\n    const [Comments, setComments] = useState([])\n    const [OpenComment, setOpenComment] = useState(false)\n\n    useEffect(() => {\n        //API : 좋아요 수 불러오기 및 나의 좋아요 여부 확인\n        axios.post('/api/like/getLike', {postId:props.post._id})\n        .then(res => {\n            if(res.data.success){\n                setLikeCount(res.data.like.length)\n                if(res.data.like.filter(me => me.likeFrom.includes(user.userData._id)).length === 0){\n                    setLike(false)\n                }else{\n                    setLike(true)\n                }\n            }\n        })\n\n        //API : 해당 포스트의 댓글 불러오기\n        axios.post('/api/comment/getComment',{postId:props.post._id})\n        .then(res => {\n            if(res.data.success){\n                setComments(res.data.comments)\n            }\n        })\n    }, [])\n\n    //API : 댓글 삭제\n    const deletePostHandler = (e) => {\n        axios.post('/api/post/deletePost',{postId:props.post._id, filePath:props.post.filePath})\n        .then(res=>{\n            if(res.data.success){\n                props.deletePost(props.post._id)\n            }\n        })\n    }\n\n    //댓글 리스트 출력\n    const showCommentHandler = (e) => {\n        setOpenComment(!OpenComment)\n    }\n    \n    //API : 좋아요 추가&해제\n    const onLikeHandler = (e) => {\n        \n        const variable = {\n            likeFrom :user.userData._id,\n            postId:props.post._id,\n        }\n        \n        if(Like){ //좋아요 해제\n            axios.post('/api/like/unLike', variable)\n            .then(res=>{\n                if(res.data.success){\n                    setLike(!Like)\n                    setLikeCount(LikeCount - 1)\n                }else{\n                    alert(\"좋아요 해제를 실패했습니다.\")\n                } \n            })\n        }else{ //좋아요 처리\n            axios.post('/api/like/setLike', variable)\n            .then(res => {\n                if(res.data.success){\n                    setLike(!Like)\n                    setLikeCount(LikeCount + 1)\n                }else{\n                    alert(\"좋아요를 실패했습니다.\")\n                }\n            })\n        }\n    } \n    \n    //Comment 컴포넌트로부터 댓글 삭제 작업\n    const deleteComment = (deleteCommentId) => {\n        const idx = Comments.findIndex( data => data._id === deleteCommentId)\n        const newArr = [...Comments]\n        newArr.splice(idx, 1)\n        setComments(newArr)\n    }\n\n    //InputComment 컴포넌트로부터 댓글 추가 작업\n    const updateComment = (newComment) => {\n        setComments(Comments.concat(newComment))\n    }\n\n    return (\n        user && \n        <div className=\"total\">\n            {\n                (user.userData._id === props.post.writer._id || user.userData.role === 1)&&\n                <Popconfirm\n                title=\"포스트를 삭제하시겠습니까?\"\n                onConfirm={deletePostHandler}\n                okText=\"Yes\"\n                cancelText=\"No\"\n                >\n                    <CloseSquareOutlined className=\"deletePostBtn\"/>\n                </Popconfirm>\n            }\n            <div className=\"post\">\n                <div className=\"photo\">\n                    {props.post.filePath.length > 0 &&\n                        <Carousel>\n                            {\n                                props.post.filePath.map((data, idx)=>(\n                                    <div key={idx}>\n                                        <Image style={{height:'400px', width:'400px'}} alt=\"photo\" src={`https://radiant-hamlet-78297.herokuapp.com/${props.post.filePath[idx]}`}/> \n                                    </div>\n                                ))\n                            }\n                        </Carousel>\n                    }  \n                </div>\n                <div className=\"content\">\n                    <div className=\"contentHeader\">\n                        {\n                            props.post.writer.profileImage?\n                            <Avatar size={48} src={`https://radiant-hamlet-78297.herokuapp.com/${props.post.writer.profileImage}`} style={{marginRight:'10px'}} />\n                            :<Avatar size={48} icon={<UserOutlined />} style={{marginRight:'10px'}}/>\n                        }\n                        <div style={{display:'flex', flexDirection:'column'}}>\n                            <span className=\"title\">{props.post.title}</span>\n                            <Writer writer={props.post.writer}/>\n                        </div>\n                    </div>\n                    <div className=\"contentBody box\">\n                        {props.post.content.split('\\n').map((line, idx) => (\n                            <React.Fragment key={idx}>\n                                {line}\n                                <br/>\n                            </React.Fragment>\n                        ))}\n                    </div>\n                    <span className=\"postDate\">{date.substring(0,10) +' '+ date.substring(11,16)}</span>\n                </div>\n            </div>\n\n            <InputComment user={user.userData} postId={props.post._id} updateComment={updateComment}/>\n\n            <div className=\"option\">\n                <div className=\"comment_icon icon\" onClick={showCommentHandler}>\n                    {\n                        OpenComment && Comments.length > 0?\n                        <MessageOutlined className=\"optionIcon\" style={{color:\"#47cea8\"}}/>\n                        :<MessageOutlined className=\"optionIcon\"/>\n                    }\n                    {Comments.length}\n                </div>\n                <div className=\"like_icon icon\" onClick={onLikeHandler}>\n                    {Like ? <HeartFilled className=\"optionIcon\" style={{color:'red'}}/>\n                    :<HeartOutlined className=\"optionIcon\"/>}\n                    {LikeCount}\n                </div>\n                <div className=\"share_icon icon\">\n                    <RetweetOutlined className=\"optionIcon\"/>\n                </div>\n            </div>\n\n            {OpenComment && Comments.length !== 0 &&  \n                <div className=\"comments box\">\n                    {\n                        Comments && Comments.map((data,idx)=>\n                            ( !data.replyTo &&  \n                                <Comment \n                                    key={idx} \n                                    comments={Comments} \n                                    comment={data}\n                                    user={user.userData} \n                                    post={props.post} \n                                    deleteComment={deleteComment}\n                                    updateComment={updateComment}\n                                />\n                            )\n                        )\n                    }\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default Post\n","import React,{useState, useEffect, useRef} from 'react'\nimport {withRouter} from  'react-router-dom';\nimport axios from 'axios';\nimport Post from '../Post/Post';\nimport './MainPage.css';\nimport {useSelector} from 'react-redux';\nimport {LoadingOutlined} from '@ant-design/icons';\n\nfunction MainPage(props) {\n\n    const [Posts, setPosts] = useState([])\n    const [Page, setPage] = useState(0)\n    const [Loading, setLoading] = useState(true)\n\n    const user = useSelector(state => state.user_reducer)\n    const pageEnd = useRef()\n    \n    //Infinite Scrolling\n    useEffect(() => {\n        if(Loading){\n            const observer = new IntersectionObserver(\n                entries => {\n                    if(entries[0].isIntersecting){\n                        getPosts()\n                    }\n                },\n                //100%일 때 옵저버 실행\n                {threshold: 1 },\n            );\n            observer.observe(pageEnd.current)\n        }\n    }, [Page])\n\n    //API : 모든 포스트 불러오기 (5개 단위)\n    const getPosts = () => {\n\n        setLoading(false)\n        \n        const variable = {\n            skip:Page\n        }\n    \n        axios.post('/api/post/getPost',variable)\n        .then(res => {\n            if(res.data.success){\n                const newData = res.data.posts\n                if(newData.length !== 0){\n                    setPosts(Posts.concat(newData))\n                    setLoading(true)\n                    setPage(Page + 1)\n                }else{ //더이상 포스트가 없음\n                    setLoading(false)\n                }\n            }else{\n                alert('fail to load Post')\n            }\n        })\n    }\n\n    //Post컴포넌트로 부터 포스트 삭제 처리\n    const deletePost = (deletePostId) => {\n        const idx = Posts.findIndex( p => p._id === deletePostId)\n        const newArr = [...Posts]\n        newArr.splice(idx, 1)\n        setPosts(newArr)\n    }\n\n    //API : 사용자의 포스트 불러오기\n    const viewMyPost = () => {\n        axios.post('/api/post/getMyPost',{writer:user.userData._id})\n        .then(res => {\n            if(res.data.success){\n                setPosts(res.data.posts.reverse())\n            }else{\n                alert('fail to load MyPost')\n            }\n        })\n    }\n\n    const viewLikePost = () => {\n\n    }\n\n    return (\n        user && \n        <div className=\"mainpage box\">\n            <div className=\"category\">\n                <span onClick={viewMyPost}>My Post</span>\n                <span>Subscribe</span>\n                <span>Message</span>\n                <span onClick={viewLikePost}>Like Post</span>\n                <div className=\"writePostBtn\" onClick={()=>{props.history.push('/write')}}>Write</div>\n            </div>\n            <div className=\"posts box\">\n                {\n                    Posts.length === 0 &&\n                    <span>표시 할 포스트가 없습니다..</span>\n                }\n                {\n                    Posts.map((data,idx)=>(\n                        <Post key={idx} post={data} deletePost={deletePost}/>\n                    ))\n                }\n                {\n                    Loading &&\n                    <div className=\"catchScroll\" ref={pageEnd}><LoadingOutlined style={{fontSize:'24px'}}/></div>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(MainPage)\n\n","import React from 'react'\nimport {useSelector} from 'react-redux';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\n\nfunction MenuRight(props) {\n\n    const user = useSelector(state => state.user_reducer);\n    \n    const onLogoutHandler = (e) => {\n        axios.get('/api/users/logout')\n        .then(res => {\n            if(res.data.success){\n                alert('로그아웃 되었습니다.');\n                props.history.push(\"/login\");\n            } else{\n                alert('로그아웃 실패 했습니다.');\n            }\n        })\n    }\n\n    const onLoginHandler = (e) =>{\n        props.history.push(\"/login\")\n    }\n\n    const onRegisterHandler = (e) =>{\n        props.history.push(\"/register\")\n    }\n\n    if(user.userData && !user.userData.isAuth){ //로그인 했을 경우\n        return (\n            <div className=\"navbar_right\">\n                <div className=\"navbar_item\">\n                    <span onClick={onLoginHandler}>Login</span>\n                </div>\n                <div className=\"navbar_item\">\n                    <span onClick={onRegisterHandler}>Register</span>\n                </div>\n            </div>\n        )\n    }else{ //로그인 하지 않았을 경우\n        return (\n            <div className=\"navbar_right\">\n                <div className=\"navbar_item\">\n                    <span>Mypage</span>\n                </div>\n                <div className=\"navbar_item\">\n                    <span onClick={onLogoutHandler}>Logout</span>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(MenuRight)\n","import React from 'react'\nimport './Navbar.css';\nimport MenuRight from './MenuRight';\n\n\nfunction NavBar() {\n\n    return (\n        <nav className=\"menu\" style={{ position: 'fixed', zIndex:'10', width: '100%' }}>\n            \n                <div className=\"menu_logo\">\n                    <a href=\"/\">Pettlog</a>\n                </div>\n                <div className=\"menu_content\">\n                    <div className=\"navbar_left\">\n                        {/* <div className=\"navbar_item\">\n                            <a href=\"/\">Home</a>\n                        </div> */}\n                    </div>\n                    <MenuRight/>\n                    \n                \n            </div>\n        </nav>\n    )\n}\n\nexport default NavBar\n","import React,{useState, useRef} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {registerUser} from '../../../_actions/user_action';\nimport {withRouter} from  'react-router-dom';\nimport {Avatar} from 'antd';\nimport axios from 'axios';\n\nfunction RegisterPage(props) {\n\n    const dispatch = useDispatch();\n\n    const [Email, setEmail] = useState(\"\");\n    const [Password, setPassword] = useState(\"\");\n    const [ConfirmPassword, setConfirmPassword] = useState(\"\");\n    const [Name, setName] = useState(\"\");\n    const [Image, setImage] = useState(\"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png\")\n    const [File, setFile] = useState(null)\n\n    const fileInput = useRef(null)\n\n    const onEmailHandler = (e) =>{\n        setEmail(e.target.value);\n    }\n\n    const onPasswordHandler = (e) =>{\n        setPassword(e.target.value);\n    }\n\n    const onConfirmPasswordHandler = (e) =>{\n        setConfirmPassword(e.target.value);\n    }\n\n    const onNameHandler = (e) =>{\n        setName(e.target.value);\n    }\n\n    //API : 프로필 사진 서버에 저장 후 파일 경로 받아옴\n    const onDrop = () => {\n\n        const formData = new FormData();\n        formData.append('file',File)\n\n        const config = {\n            header: { \"Content-Type\": \"multipart/form-data\" }\n        }\n\n        axios.post('/api/users/uploadProfileImage',formData, config)\n        .then(res => {\n            if(res.data.success){\n                saveDataDB(res.data.url)\n            }\n        })\n    }\n\n    // API : 가입한 회원 정보 db에 저장\n    const saveDataDB = (path) => {\n\n        let body = {\n            email : Email,\n            password : Password,\n            name : Name,\n            profileImage : path\n        }\n\n        dispatch(registerUser(body))\n        .then(res=>{\n            if(res.payload.success){ \n                props.history.push('/login')\n            }else{\n                alert('로그인을 실패했습니다.');\n            }\n        })\n    }\n\n    const onSubmitHandler = (e) => {\n        e.preventDefault();\n\n        if(Password.length < 5){\n            return alert('비밀번호를 5자 이상 입력해주세요.');\n        }\n\n        if(Password !== ConfirmPassword){\n            return alert('비밀번호가 다릅니다.'); \n        }\n\n        if(File!==null){\n            onDrop()\n        }else{\n            saveDataDB('')\n        }\n    }\n\n    // 프로필 사진 파일 업로드 핸들러\n    const onChange = (e) => {\n\n        if(e.target.files[0]){\n            setFile(e.target.files[0])\n        }else{ //업로드 취소할 시\n            setImage(\"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png\")\n            return\n        }\n\n        //프로필 사진 표시\n        const reader = new FileReader();\n        reader.onload = () => {\n            if(reader.readyState === 2){\n                setImage(reader.result)\n            }\n        }\n        reader.readAsDataURL(e.target.files[0])\n    }\n\n    return (\n        <div style={{display:'flex', justifyContent:'center', alignItems:'center',width:'100%',height:'100vh'}}>\n            <form style={{display:'flex', flexDirection:'column'}} onSubmit={onSubmitHandler}>\n                \n                <label>Profile Image</label>\n                <Avatar src={Image} style={{margin:'20px'}} size={200} onClick={()=>{fileInput.current.click()}}/>\n                <input type='file' \n                    style={{display:'none'}}\n                    accept='image/jpg,impge/png,image/jpeg' \n                    name='profile_img'\n                    onChange={onChange}\n                    ref={fileInput}/>\n                \n                <label>Email</label>\n                <input type=\"email\" value={Email} onChange={onEmailHandler}></input>\n                \n                <label>Name</label>\n                <input type=\"text\" value={Name} onChange={onNameHandler}></input>\n\n                <label>Password</label>\n                <input type=\"password\" value={Password} onChange={onPasswordHandler}></input>\n                \n                <label>Confirm Password</label>\n                <input type=\"password\" value={ConfirmPassword} onChange={onConfirmPasswordHandler}></input>\n                <br/>\n                <button>\n                    Register\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default withRouter(RegisterPage)\n","import React, {useEffect} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { auth } from '../_actions/user_action';\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default function (SpecificComponent, option, adminRoute = null) {\n    \n    // null => 아무나 출입이 가능한 페이지\n    // true => 로그인한 유저만 출입이 가능한 페이지\n    // false => 로그인한 유저는 출입 불가능한 페이지\n    \n    function AuthenticationCheck(props) {\n        const dispatch = useDispatch();\n\n        useEffect(() => {\n            \n            //auth()의 처리 결과가 res로 들어감\n            dispatch(auth()).then(response => {\n\n                console.log(response)\n\n                // 로그인하지않은 상태\n                if(!response.payload.isAuth) {\n                    if(option) {\n                        props.history.push('/login')\n                    }\n                } else { //로그인 한 상태\n                    // 관리자 아님\n                    if(adminRoute && !response.payload.isAdmin) {\n                        props.history.push('/')\n                    } else {\n                        if(option === false)\n                        props.history.push('/')\n                    }\n                 }\n            })\n        }, [])\n\n        return (\n            <SpecificComponent/>\n        )\n    }\n    return AuthenticationCheck\n}","import axios from 'axios';\nimport React,{useState, useEffect} from 'react';\nimport { useSelector } from 'react-redux';\nimport {message,Input,Upload,Button} from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { withRouter } from 'react-router-dom';\n\nfunction WritePost(props) {\n\n    const user = useSelector(state => state.user_reducer)\n    const [fileList, setFileList] = useState([]);\n    const [Title, setTitle] = useState('')\n    const [Content, setContent] = useState('')\n\n    useEffect(() => {\n        //console.log(fileList)\n    }, [fileList])\n\n    const onSubmitHandler = (e) => {\n        e.preventDefault();\n\n        if(Title.length === 0){\n            message.error('제목을 작성해 주세요.')\n            return\n        }\n\n        if(Content.length === 0){\n            message.error('내용을 작성해 주세요.')\n            return\n        }\n\n        if (fileList.length !== 0){ //올릴 이미지 파일이 있으면\n            onDrop(fileList)\n            return\n        }else{\n            uploadPost([])\n        }\n    }\n        \n    const uploadPost = (filePath) => {\n\n        const variable = {\n            writer:user.userData._id,\n            title:Title,\n            content:Content,\n            filePath:filePath,\n            date:new Date()\n        }\n\n        axios.post('/api/post/uploadPost', variable)\n        .then(res=>{\n            if(res.data.success){\n                message.success('포스트를 업로드 했습니다.')\n                props.history.push('/')\n                }else{\n                    alert('fail to upload Post')\n                }\n            })\n        }\n\n    const onDrop = async(files) => { //서버에 파일 업로드\n        let formData = new FormData();\n        const config = {\n            header: { \"Content-Type\": \"multipart/form-data\" }\n        }\n        \n        for(let i=0 ; i < files.length; i++){\n            formData.append(`file`, files[i].originFileObj);\n        }\n\n        await axios.post('/api/post/uploadImage', formData, config)\n        .then(res=>{\n            if(res.data.success){\n                uploadPost(res.data.url)\n            }\n        })\n    }\n    \n    const onFileChange = ({ fileList: newFileList }) => {\n        setFileList(newFileList);\n      };\n   \n    const onTitleHandler = (e) =>{\n        if (Title.length > 30){\n            alert('제목은 30자를 넘을 수 없습니다.')\n            setTitle(e.target.value.substring(0,30))\n            return\n        }\n        setTitle(e.target.value);\n    }\n\n    const onContentHandler = (e) => {\n\n        if (Content.length > 500){\n            alert('내용은 500자를 넘을 수 없습니다.')\n            setContent(e.target.value.substring(0,500))\n            return\n        }\n        setContent(e.target.value);\n    }\n\n    const beforeUpload = (file) => {\n\n        if(file.size > 1024 * 1024){\n            message.error('1MB 이하 이미지 파일만 업로드 할 수 있습니다.');\n            return Upload.LIST_IGNORE;\n        }\n\n        return false\n    }\n\n    return (\n        <div style={{display:'flex', justifyContent:'center', alignItems:'center',width:'100%',height:'100vh'}}>\n            <form style={{display:'flex', flexDirection:'column', width:'30%'}}>\n                \n                <label>Title</label>\n                <Input type=\"text\" value={Title} onChange={onTitleHandler} />\n                \n                <label>Content</label>\n                <Input.TextArea type=\"text\" value={Content} onChange={onContentHandler} style={{height:'200px'}}/>\n\n                <label>Image</label>\n                <Upload\n                    accept='image/jpg,impge/png,image/jpeg'\n                    listType=\"picture\"\n                    maxCount={3}\n                    beforeUpload={beforeUpload}\n                    multiple\n                    onChange={onFileChange}\n                >\n                    <Button icon={<UploadOutlined />}>Upload</Button>\n                </Upload>\n                \n                <button onClick={onSubmitHandler} style={{marginTop:'10px'}}>\n                    Upload\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default withRouter(WritePost)","import React from 'react'\nimport {BrowserRouter as Router, Switch,Route} from \"react-router-dom\";\nimport LoginPage from './components/views/LoginPage/LoginPage';\nimport MainPage from './components/views/MainPage/MainPage';\nimport NavBar from './components/views/NavBar/NavBar';\nimport RegisterPage from './components/views/RegisterPage/RegisterPage';\n// import MyPage from './components/views/MyPage/MyPage';\nimport Auth from './hoc/auth';\nimport WritePost from './components/views/WritePost/WritePost';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <NavBar/>\n        <div />\n        <Switch>\n          <Route exact path=\"/\" component={Auth(MainPage, true)} />\n          {/* <Route exact path=\"/mypage\" component={Auth(MyPage, true)} /> */}\n          <Route exact path=\"/login\" component={Auth(LoginPage, false)} />\n          <Route exact path=\"/write\" component={Auth(WritePost, true)} />\n          <Route exact path=\"/register\" component={Auth(RegisterPage, false)} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\nimport user_reducer from './user_reducer';\n\nconst rootReducer = combineReducers({\n    user_reducer\n})\n\nexport default rootReducer;","import {LOGIN_USER, REGISTER_USER, AUTH_USER} from '../_actions/types';\n\nexport default function user_reducer(state = {}, action) {\n\n    switch(action.type){\n        case LOGIN_USER:\n            return {...state, loginSuccess:action.payload}\n            break;\n\n        case REGISTER_USER:\n            return {...state, registerSuccess:action.payload}\n            break;\n\n        case AUTH_USER:\n            return {...state, userData:action.payload}\n            break;\n\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'antd/dist/antd.css';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport { applyMiddleware, createStore } from 'redux';\nimport promiseMiddleware from 'redux-promise';\nimport ReduxThunk from 'redux-thunk';\nimport Reducer from './_reducer/index';\n\nconst createStoreWithMiddleware = applyMiddleware(promiseMiddleware, ReduxThunk)(createStore)\n\nReactDOM.render(\n    <Provider store={createStoreWithMiddleware(Reducer, \n      window.__REDUX_DEVTOOLS_EXTENSION__ && \n      window.__REDUX_DEVTOOLS_EXTENSION__() \n      )}\n    >\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}